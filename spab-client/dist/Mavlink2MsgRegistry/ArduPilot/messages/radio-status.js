"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioStatus = void 0;
const node_mavlink_1 = require("@ifrunistuttgart/node-mavlink");
/*
Status generated by radio and injected into MAVLink stream.
*/
// rssi Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. uint8_t
// remrssi Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown. uint8_t
// txbuf Remaining free transmitter buffer space. uint8_t
// noise Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. uint8_t
// remnoise Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown. uint8_t
// rxerrors Count of radio packet receive errors (since boot). uint16_t
// fixed Count of error corrected radio packets (since boot). uint16_t
class RadioStatus extends node_mavlink_1.MAVLinkMessage {
    constructor() {
        super(...arguments);
        this._message_id = 109;
        this._message_name = 'RADIO_STATUS';
        this._crc_extra = 185;
        this._message_fields = [
            ['rxerrors', 'uint16_t', false],
            ['fixed', 'uint16_t', false],
            ['rssi', 'uint8_t', false],
            ['remrssi', 'uint8_t', false],
            ['txbuf', 'uint8_t', false],
            ['noise', 'uint8_t', false],
            ['remnoise', 'uint8_t', false],
        ];
    }
}
exports.RadioStatus = RadioStatus;
